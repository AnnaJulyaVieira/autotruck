require('dotenv').config();
const twilio = require('twilio');

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// Verificar status de mensagens recentes
async function verificarStatusRecentes() {
    console.log('üîç ================================');
    console.log('   VERIFICA√á√ÉO DE STATUS SMS');
    console.log('üîç ================================\n');

    try {
        // Buscar as √∫ltimas 20 mensagens
        console.log('üìã Buscando mensagens recentes...\n');
        
        const messages = await client.messages.list({ limit: 20 });
        
        if (messages.length === 0) {
            console.log('‚ùå Nenhuma mensagem encontrada');
            return;
        }

        // Mostrar detalhes de cada mensagem
        messages.forEach((msg, index) => {
            console.log(`üì± MENSAGEM ${index + 1}:`);
            console.log(`   üÜî SID: ${msg.sid}`);
            console.log(`   üìû Para: ${msg.to}`);
            console.log(`   üì§ De: ${msg.from}`);
            console.log(`   üìä Status: ${getStatusIcon(msg.status)} ${msg.status.toUpperCase()}`);
            console.log(`   üìÖ Criado: ${msg.dateCreated.toLocaleString('pt-BR')}`);
            console.log(`   üì® Enviado: ${msg.dateSent ? msg.dateSent.toLocaleString('pt-BR') : 'N√£o enviado'}`);
            console.log(`   üìù Atualizado: ${msg.dateUpdated.toLocaleString('pt-BR')}`);
            
            // Mostrar erros se houver
            if (msg.errorCode) {
                console.log(`   ‚ùå Erro: ${msg.errorCode} - ${msg.errorMessage}`);
            }
            
            // Mostrar pre√ßo se dispon√≠vel
            if (msg.price) {
                console.log(`   üí∞ Pre√ßo: ${msg.price} ${msg.priceUnit}`);
            }
            
            // Mostrar primeiros caracteres da mensagem
            if (msg.body) {
                const preview = msg.body.length > 50 ? 
                    msg.body.substring(0, 50) + '...' : 
                    msg.body;
                console.log(`   üí¨ Mensagem: "${preview}"`);
            }
            
            console.log('   ' + '‚îÄ'.repeat(50));
            console.log();
        });

        // Estat√≠sticas gerais
        console.log('\nüìä ESTAT√çSTICAS:');
        const stats = calcularEstatisticas(messages);
        
        console.log(`üì§ Total enviadas: ${messages.length}`);
        console.log(`‚úÖ Entregues: ${stats.delivered} (${stats.deliveredPercent}%)`);
        console.log(`‚ùå Falharam: ${stats.failed} (${stats.failedPercent}%)`);
        console.log(`‚è≥ Pendentes: ${stats.pending} (${stats.pendingPercent}%)`);
        console.log(`üîÑ Em tr√¢nsito: ${stats.sent} (${stats.sentPercent}%)`);
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar status:', error.message);
    }
}

// Verificar status de um SMS espec√≠fico pelo SID
async function verificarSMSEspecifico(sid) {
    console.log(`üîç Verificando SMS espec√≠fico: ${sid}\n`);
    
    try {
        const message = await client.messages(sid).fetch();
        
        console.log('üì± DETALHES COMPLETOS:');
        console.log(`   üÜî SID: ${message.sid}`);
        console.log(`   üìû Para: ${message.to}`);
        console.log(`   üì§ De: ${message.from}`);
        console.log(`   üìä Status: ${getStatusIcon(message.status)} ${message.status.toUpperCase()}`);
        console.log(`   üìÖ Criado: ${message.dateCreated.toLocaleString('pt-BR')}`);
        console.log(`   üì® Enviado: ${message.dateSent ? message.dateSent.toLocaleString('pt-BR') : 'N√£o enviado'}`);
        console.log(`   üìù Atualizado: ${message.dateUpdated.toLocaleString('pt-BR')}`);
        console.log(`   üìç Dire√ß√£o: ${message.direction}`);
        console.log(`   üåç C√≥digo pa√≠s: ${message.to.substring(0, 3)}`);
        
        if (message.errorCode) {
            console.log(`   ‚ùå C√≥digo erro: ${message.errorCode}`);
            console.log(`   üí¨ Mensagem erro: ${message.errorMessage}`);
            console.log(`   üìã Explica√ß√£o: ${getErrorExplanation(message.errorCode)}`);
        }
        
        if (message.price) {
            console.log(`   üí∞ Pre√ßo: ${message.price} ${message.priceUnit}`);
        }
        
        console.log(`   üí¨ Mensagem completa:`);
        console.log(`   "${message.body}"`);
        
        // Dicas baseadas no status
        console.log(`\nüí° O QUE SIGNIFICA:`);
        console.log(`   ${getStatusExplanation(message.status)}`);
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar SMS:', error.message);
    }
}

// Fun√ß√µes auxiliares
function getStatusIcon(status) {
    const icons = {
        'queued': '‚è≥',
        'sent': 'üì§',
        'delivered': '‚úÖ',
        'failed': '‚ùå',
        'undelivered': 'üìµ',
        'receiving': 'üì•',
        'received': '‚úÖ'
    };
    return icons[status] || '‚ùì';
}

function getStatusExplanation(status) {
    const explanations = {
        'queued': 'SMS na fila do Twilio, ser√° enviado em breve',
        'sent': 'SMS enviado para a operadora, aguardando entrega',
        'delivered': 'SMS entregue com sucesso no celular',
        'failed': 'SMS falhou - pode ser n√∫mero inv√°lido ou bloqueio da operadora',
        'undelivered': 'SMS n√£o foi entregue - operadora rejeitou',
        'receiving': 'Recebendo SMS (para n√∫meros de entrada)',
        'received': 'SMS recebido com sucesso'
    };
    return explanations[status] || 'Status desconhecido';
}

function getErrorExplanation(errorCode) {
    const errors = {
        '30007': 'N√∫mero de telefone n√£o pode receber SMS',
        '21211': 'N√∫mero de telefone inv√°lido',
        '21614': 'N√∫mero inv√°lido para o pa√≠s',
        '21608': 'N√∫mero n√£o pode receber SMS (linha fixa ou inv√°lida)',
        '30003': 'Mensagem n√£o p√¥de ser entregue - n√∫mero inexistente',
        '30005': 'N√∫mero de telefone desconhecido',
        '21610': 'Mensagem possui conte√∫do proibido'
    };
    return errors[errorCode] || 'Consulte documenta√ß√£o Twilio para mais detalhes';
}

function calcularEstatisticas(messages) {
    const total = messages.length;
    const delivered = messages.filter(m => m.status === 'delivered').length;
    const failed = messages.filter(m => m.status === 'failed').length;
    const pending = messages.filter(m => m.status === 'queued').length;
    const sent = messages.filter(m => m.status === 'sent').length;
    
    return {
        delivered,
        failed,
        pending,
        sent,
        deliveredPercent: ((delivered/total)*100).toFixed(1),
        failedPercent: ((failed/total)*100).toFixed(1),
        pendingPercent: ((pending/total)*100).toFixed(1),
        sentPercent: ((sent/total)*100).toFixed(1)
    };
}

// Interface de linha de comando
const args = process.argv.slice(2);

if (args.length > 0) {
    // Verificar SMS espec√≠fico pelo SID
    const sid = args[0];
    if (sid.startsWith('SM')) {
        verificarSMSEspecifico(sid);
    } else {
        console.log('‚ùå SID inv√°lido. Deve come√ßar com "SM"');
        console.log('üí° Exemplo: node check-sms-status.js SM1234567890abcdef1234567890abcdef');
    }
} else {
    // Mostrar mensagens recentes
    verificarStatusRecentes();
}

console.log('\nüí° COMO USAR:');
console.log('node check-sms-status.js                    -> Ver mensagens recentes');
console.log('node check-sms-status.js SM1234567890...    -> Ver SMS espec√≠fico por SID');